{"version":3,"sources":["images/logo.svg","components/SmallScreenContext.js","components/ScoreContext.js","components/MiscContext.js","components/AnswerButton.js","App.js","index.js"],"names":["SmallScreenContext","createContext","ScoreContext","MiscContext","AnswerButton","props","smallScreen","useContext","score","setScore","handleRequest","setUserLogMessage","scoreEarned","setAnswered","timeoutVal","className","Button","onClick","name","correct","console","log","setTimeout","style","App","useState","setSmallScreen","useEffect","window","innerWidth","addEventListener","imageStrings","setImageStrings","options","setOptions","answer","setAnswer","setScoreEarned","userLogMessage","imageIdx","setImageIdx","answered","setTimeoutVal","axios","method","url","then","res","time_left","idx","time","timerInterval","setInterval","progress_bar","Math","round","clearInterval","timerEvent","data","image_strings","catch","err","Provider","value","Container","fluid","Row","Col","lg","Image","rounded","src","ProgressBar","now","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7580618a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {createContext} from 'react'\n\nconst SmallScreenContext = createContext();\n\nexport default SmallScreenContext;\n","import {createContext} from 'react'\n\nconst ScoreContext = createContext();\n\nexport default ScoreContext;\n","import {createContext} from 'react'\n\nconst MiscContext = createContext();\n\nexport default MiscContext;\n","import { React, useState, useContext } from 'react';\nimport { Button } from 'react-bootstrap';\nimport '../css/app.css'\nimport SmallScreenContext from './SmallScreenContext';\nimport ScoreContext from './ScoreContext';\nimport MiscContext from './MiscContext';\nimport axios from 'axios';\n\nfunction AnswerButton(props) {\n\n    // function space\n\n    const smallScreen = useContext(SmallScreenContext)\n    const [score, setScore] = useContext(ScoreContext)\n    const [imageIdx, setImageIdx, handleRequest, userLogMessage, setUserLogMessage, scoreEarned, setScoreEarned, answered, setAnswered, timeoutVal] = useContext(MiscContext)\n\n    function handleClick() {\n        setAnswered(true)\n        if (props.name === props.correct) {  \n            setScore(score + scoreEarned)\n            \n            setUserLogMessage(\"Your answer was correct, good job!\")\n            // setTimeout(() => {\n            //     setUserLogMessage(\"\")\n            // }, 5000)\n            // setScoreEarned(100)\n\n\n            \n\n        }\n        else {\n            console.log(\"Your answer was incorrect, the correct answer was \" + props.correct)\n            setScore(0)\n            // setImageIdx(5)\n            \n            setUserLogMessage(\"Your answer was incorrect, the correct answer was \" + props.correct + \". The game is restarting.\")\n            // setTimeout(() => {\n            //     setUserLogMessage(\"\")\n            // }, 5000)\n            // setScoreEarned(100)\n\n\n        }\n        setTimeout(() => {handleRequest()}, timeoutVal)\n        \n    }\n\n    \n\n\n    return (\n        <div className=\"mb-3 d-flex justify-content-center\">\n            <Button onClick={handleClick} className={smallScreen ? \"button-override-small d-flex justify-self-center justify-content-center\" : \"button-override d-flex align-items-center justify-content-center justify-self-center\"}><h3 style={{ \"margin\": 0 }}>{props.name}</h3></Button>\n        </div>\n\n\n    )\n\n}\n\nexport default AnswerButton;","import logo from './images/logo.svg';\nimport './css/app.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Container, Row, Col, Image, ProgressBar } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\n// Component Imports\nimport SmallScreenContext from './components/SmallScreenContext';\nimport ScoreContext from './components/ScoreContext';\nimport MiscContext from './components/MiscContext';\nimport AnswerButton from './components/AnswerButton';\nimport axios from 'axios';\n\n\nfunction App() {\n\n  const [smallScreen, setSmallScreen] = useState(false);\n  // To use in components, use \"const smallScreen = useContext(SmallScreenContext);\"\n  // This needs to be done after importing useContext and the component itself\n  useEffect(() => {\n    if (window.innerWidth <= 1000) {\n      setSmallScreen(true)\n    }\n    handleRequest()\n\n  }, [])\n\n  const widthChanged = () => {\n    if (window.innerWidth <= 1000) {\n      setSmallScreen(true)\n    }\n    else {\n      setSmallScreen(false)\n    }\n\n  }\n\n  window.addEventListener('resize', widthChanged)\n\n\n  const [imageStrings, setImageStrings] = useState([])\n  const [options, setOptions] = useState([])\n  const [answer, setAnswer] = useState(\"\")\n\n  let [score, setScore] = useState(0);\n  let [scoreEarned, setScoreEarned] = useState(100)\n\n\n  let [userLogMessage, setUserLogMessage] = useState(\"\");\n\n\n\n\n  const [imageIdx, setImageIdx] = useState(0)\n\n  const [answered, setAnswered] = useState(false)\n  const [timeoutVal, setTimeoutVal] = useState(12000)\n\n\n  function timerEvent() {\n\n    let time_left = 12\n    let idx = 0;\n    let time = 0;\n\n    setScoreEarned(100)\n\n    let timerInterval = setInterval(() => {\n\n      if (answered === true) {\n        clearInterval(timerInterval)\n        return;\n\n      }\n\n      if ((time % 2000 === 0) && (idx < 6)) {\n        setImageIdx(idx);\n        idx++;\n      }\n      time = time + 100;\n      setTimeoutVal(13000-time);\n\n      let progress_bar = scoreEarned;\n      progress_bar = Math.round(((time_left) / 12) * 100);\n      time_left = time_left - 0.1;\n      if (time_left <= 0) {\n        progress_bar = 0\n        clearInterval(timerInterval)\n        return;\n      }\n\n\n\n\n      setScoreEarned(progress_bar);\n      // console.log(progress_bar)\n\n\n\n\n\n\n    }, 100)\n  }\n\n  function handleRequest() {\n    axios({\n      method: 'get',\n      url: 'https://vedaantv.pythonanywhere.com/generate',\n    })\n      .then((res) => {\n\n        // setTimerBar(100)\n        // setScoreEarned(100)\n\n        // console.log(res.data);\n        setImageIdx(0)\n        // handleTimer()\n        timerEvent()\n        setAnswered(false)\n        setImageStrings(res.data.image_strings)\n        setAnswer(res.data.answer)\n        setOptions(res.data.options)\n\n\n      })\n      .catch((err) => {\n\n        console.log(err)\n      });\n\n  }\n\n  function handleRestart() {\n    setScore(0)\n    // setScoreEarned(100)\n\n    setUserLogMessage(\"The application is now restarting. Please wait...\")\n\n    setTimeout(() => {\n      setUserLogMessage(\"Application Restarted\")\n      handleRequest()\n    }, timeoutVal)\n    \n  }\n\n\n\n\n  return (\n    <div className=\"\">\n      <MiscContext.Provider value={[imageIdx, setImageIdx, handleRequest, userLogMessage, setUserLogMessage, scoreEarned, setScoreEarned, answered, setAnswered, timeoutVal]}>\n        <ScoreContext.Provider value={[score, setScore]}>\n          <SmallScreenContext.Provider value={smallScreen}>\n            <Container fluid='lg' className=\"c-w change-font mt-5 mb-5\">\n              <Row className=\"text-center\">\n                <h1>Welcome to <span className=\"fw-700 text-blue\">AniMatch</span></h1>\n                <h3>Your goal is to correctly identify as many characters as possible. Good Luck!</h3>\n              </Row>\n\n              <Row className=\" mt-5\">\n                <Col lg=\"6\" className=\"text-center d-flex flex-column align-items-center\">\n                  <h4 className=\"mb-3\">Who is this character?</h4>\n                  <Image rounded src={`data:image/jpg;base64,${imageStrings[imageIdx]}`} className={smallScreen ? \"mb-4 dims-small\" : \"mb-4 dims-rel\"} />\n\n\n\n                </Col>\n\n                <Col lg=\"6\" className=\"mt-3 text-center d-flex flex-column align-items-center \">\n                  <div className=\"align-self-center d-flex justify-content-center flex-column\">\n                    <AnswerButton name={options[0]} correct={answer} />\n                    <AnswerButton name={options[1]} correct={answer} />\n                    <AnswerButton name={options[2]} correct={answer} />\n                    <AnswerButton name={options[3]} correct={answer} />\n                    <Button onClick={handleRestart} className={smallScreen ? \"mt-3 restart-button-small w-100\" : \"mt-3 restart-button w-100\"}><h3 style={{ \"margin\": 0 }}>Restart</h3></Button>\n                    <ProgressBar className=\"mt-5 mb-3\" now={scoreEarned} />\n                    {!answered &&\n                      <h4>You will currently earn <span className=\"text-blue fw-700\">{scoreEarned}</span> points!</h4>}\n                    {answered &&\n                      <h4>Please wait a few moments for the next option to show up!</h4>\n                    }\n                    <h4>Score: <span className=\"text-blue fw-700\">{score}</span></h4>\n\n                    {/* <Button onClick={handleTimer}>Test Timer</Button> */}\n\n\n                  </div>\n\n                  <h3 className=\"mt-3\">{userLogMessage}</h3>\n\n                </Col>\n\n\n\n\n              </Row>\n\n            </Container>\n\n\n\n          </SmallScreenContext.Provider>\n\n        </ScoreContext.Provider>\n\n      </MiscContext.Provider>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}